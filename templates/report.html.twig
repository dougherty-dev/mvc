{% extends "base.html.twig" %}

{% block title %}Rapport{% endblock %}

{% block body %}
    <select id="kmom" aria-label="kmom" onChange="window.document.location.href=this.options[this.selectedIndex].value;">
        <option value="#navbar">topp</option>
        <option value="#kmom01">km01</option>
        <option value="#kmom02">km02</option>
        <option value="#kmom03">km03</option>
        <option value="#kmom04">km04</option>
        <option value="#kmom05">km05</option>
        <option value="#kmom06">km06</option>
        <option value="#kmom10">km10</option>
    </select>
    <h1>Rapport</h1>
    <section class="two-columns" id="kmom10">
        <h2>Kmom10</h2>
        <h3>1‚Äì3. Webbplats</h3>
        <p class="initcap">F√∂r slutprojektet har valts en till√§mpning av kortspelet Texas Hold‚Äôem. F√∂r √§ndam√•let har en klar avgr√§nsning gjorts fr√•n tidigare kursmoment genom att l√§gga till en ny entrypoint ¬´project¬ª i webpacks konfigurationsfil, varvid en separat sajt med skilda stilmallar kan byggas. Klich√©n har att poker renderas i gr√∂na f√§rger, men temat p√• den kul√∂ren √§r redan upptaget i den ordinarie utformningen i Ghibli-stil. Ist√§llet valdes en stark kontrast i bl√•, lila, rosa och r√∂tt, ett skarpt tema som faktiskt passar utm√§rkt f√∂r verksamheten. Ytterligare relief ges av en antikva (Bembo) som typsnitt i mots√§ttning till den tidigare linj√§ren (Poppins).</p>
        <p>Huvud och fot har bantats ned bet√§nkligt f√∂r att ge plats √•t pokerbordet, samtidigt som en unik navigeringslist har implementerats. Referens till huvudsajten ges av en hem-ikon (üè†) i h√∂rnet. Sj√§lva inneh√•llet best√•r av en frontsida med regelbeskrivning f√∂r och en l√§nk till spelet, samt en om-sida som beskriver projektet i korthet. Repo, PHPDoc med mera f√∂ljer tidigare m√∂nster, och erbjuder inget nytt.</p>
        <figure>
            <img src="{{ asset('build/images/poker/texas.avif') }}" width="1500" alt="Texas Hold‚Äôem">
        </figure>
        <h3>4. JSON-API</h3>
        <p>I likhet med tidigare API:n f√∂r kortspelet 21 ges h√§r n√•gra motsvarigheter f√∂r Texas Hold‚Äôem. Bland annat ges √•tkomst till aktuell st√§llning i spelet, med √∂ppna kort f√∂r varje spelare och samtliga √∂vriga data i en ganska komplex struktur, √§ven omfattande aktuell kortlek och kastade kort. En enklare variant √§r att v√§lja en enskild spelares aktuella hand i klarvy samt √∂vriga data. Ytterligare en rutt visar samtliga m√∂jliga kombinationer givet en spelares hand om tv√• kort samt bordets fem kort i slutspelet, inalles 21 kombinationer plus vinnande hand.</p>
        <p>En variant p√• temat ges av att avsl√∂ja vinnaren i slutspelet alldeles innan showdown. D√§rtill kommer tv√• rutter som behandlar kodning och avkodning av de hexkoder som nyttjas f√∂r att j√§mf√∂ra h√§nders styrka. Givet att svit √§r irrelevant och det finns fjorton kortval√∂rer √§r hexadecimal representation l√§mplig f√∂r att i fallande ordning representera handens styrka, fr√•n dess 8 typer (f√§rgstege, fyrtal o.s.v.) i f√∂rsta positionen och maximalt tv√• h√∂ga kort i de tv√• efterf√∂ljande, till maximalt fyra kickers i fallande ordning i slutpositionerna. Det √§r en entydig ordning, och kan d√§rf√∂r kompareras alfanumeriskt.</p>
        <h3>5. ORM</h3>
        <p>Tidigare kortspel nyttjade sessionen f√∂r kommunikation mellan back- och frontend, men h√§r nyttjas ist√§llet en databas f√∂r en mer best√§ndig form. Man kan allts√• v√§xla browser och enhet f√∂r att forts√§tta med spelet, i vad som √§r ett embryo till en mer avancerad l√∂sning med konton och flera spel. Doctrines system nyttjades f√∂r att skapa tv√• enkla tabeller <code>community</code> och <code>player</code>, d√§r den f√∂rra h√•ller variabler kring spelet och aktuell runda, och den senare lagrar motsvarande data f√∂r varje enskild spelare. N√•gra kopplingar ges inte i denna till√§mpning, inte heller procedurer. √Ñven en tabell <code>log</code> har skapats, men den √§r f√∂r n√§rvarande inte i bruk ‚Äì det skulle √∂ka komplexiteten och ta f√∂r mycket tid i anspr√•k att implementera <code>LoggerInterface</code> inom den givna ramen.</p>
        <p>Repon och entiteter m√•ste d√§refter kopplas till motsvarande modeller, eftersom databaser till skillnad fr√•n sessionen inte kan hantera PHP-specifika klasser. H√§r sker typiskt en konvertering till och fr√•n enkla arrayer, som i och f√∂r sig √§r objekt men inte av den typ vi √∂nskar. Hanteringen √∂kar komplexiteten en del, men underl√§ttar i andra avseenden samt ger en mer robust form. Se en mer <a class="pagelink" href="{{ path('proj_about_database') }}">utf√∂rlig beskrivning</a> p√• separat sida.</p>
        <h3>6. Avancerade features</h3>
        <p>F√∂ljande utmaningar kan noteras med projektet, samtliga relaterade till kortspelets betydligt h√∂gre komplexitet.</p>
        <ol type="i">
            <li>
            <strong>Dels</strong> att forma ett plastiskt pokerbord i CSS s√• att spelet ‚Äì i vart fall i princip ‚Äì kan spelas √§ven p√• den minsta t√§nkbara enhet. Knappar f√∂r croupier och m√∂rkar samt ikoner f√∂r spelare m√•ste flyta med och skalas korrekt i takt med att bordet f√∂r√§ndrar dimensioner, och p√• samma s√§tt m√•ste h√§nder med kort ligga fast tillsammans med insatser. H√§r nyttjades fr√§mst <code>grid</code> i <code>grid</code> med namngivna areor f√∂r att definiera upp bordet.</li>
            <li><strong>Dels</strong> att implementera den omfattande logik som pr√§glar spelet, under samtidigt beaktande av att h√•lla klasserna sm√•, rena och fria fr√•n komplexitet. Komposition (framf√∂r arv) med beroendeinjektion har nyttjats flitigt f√∂r att √•stadkomma kod med ganska h√∂g grad av √•teranv√§ndning. Exempelvis √§r det bara petitesser som skiljer budgivningen √•t under en runda (preflop, flop, turn, river), varf√∂r en och samma huvudslinga kan nyttjas f√∂r √§ndam√•let. N√§rmare sjuttio klasser och enumerationer har √§nd√• definierats f√∂r spelet, d√§r de senare spelar en framtr√§dande roll i att gestalta spelets strukturer i allt fr√•n kortlek till speltillst√•nd.</li>
            <li><strong>Dels</strong> att ta fram en mekanism f√∂r po√§ngber√§kning f√∂r alla m√∂jliga h√§nder givet fem plus tv√• kort. H√§r hamnar vi inom ramen f√∂r kombinatorik, vilket vi tekniska matematiker kanske beh√§rskar, men som f√∂r flertalet √§r sv√•rbegriplig materia. Specifikt genererar vi den s√• kallade <em>potensm√§ngden</em> av alla kombinationer av sju kort (7¬≤), och filtrerar d√§refter p√• vektorer med fem unika element. Dessa utg√∂rs av sju √∂ver fem element, eller 21 unika h√§nder. Dessa 21 vektorer nyttjas vidare f√∂r att ta fram en hexadecimalstr√§ng om sju positioner med maximal storlek.<br><br>
            Hexstr√§ngen, p√• format <code>H160dc80</code>, indikerar i position 0 ett betydelsel√∂st inledande H f√∂r att i f√∂rekommande fall undvika f√∂rv√§xling med heltal, och i position 1 en numerisk representation av m√∂jliga h√§nder, n√§mligen:<br><br>
            <ol start="0">
                <li>h√∂gt kort</li>
                <li>par</li>
                <li>tv√•par</li>
                <li>triss</li>
                <li>stege</li>
                <li>f√§rg</li>
                <li>k√•k</li>
                <li>fyrtal</li>
                <li>f√§rgstege</li>
            </ol>
            Positioner 2‚Äì3 representerar h√∂gt kort, exempelvis vid par eller tv√•par. Resterande fyra positioner √§r s√• kallade kickers, vars inb√∂rdes v√§rde i rangordning avg√∂r vid lika st√§llning i √∂vrigt. Denna hexadecimala representation kan direkt j√§mf√∂ras alfanumeriskt. Str√§ngen <code>H160dc80</code> betyder d√§rmed ett par med sexor h√∂ga samt med kung (d), dam (c) och 8 som kickers.</li>
            <li><strong>Dels</strong> att j√§mka samman databas med modeller samt skyffla relevanta data fram och tillbaka. I retrospektiv hade ett b√§ttre namngivningsschema varit √∂nskv√§rt, s√• att man inte st√§ndigt f√∂rv√§xlar <code>players</code> och <code>community</code> f√∂r respektive modell. Utrymmet f√∂r optimering √§r gott i allm√§nhet, och i synnerhet i fr√•ga om att styra upp databashanteringen, men det ligger nog utanf√∂r de marginaler som definieras av projektet.</li>
            <li><strong>Dels</strong> att h√•lla ned ett v√§xande antal klasser i storlek och komplexitet f√∂r att tillfredsst√§lla Scrutinizer och PhpMetrics, ett f√∂rfarande som dessutom g√∂r testningen mer omst√§ndlig. Den komplexa logiken √§r √§ven i detta avseende en utmaning. Icke desto mindre n√•s en tillfredst√§llande l√∂sning, med idel gr√∂n representation och n√§ra nog fullst√§ndig t√§ckning. Hundra procent g√•r inte l√§ngre att uppn√• f√∂r detta mer komplicerade tillst√•ndsberoende system.</li>
        </ol>
        <table>
            <tr>
                <td width="50%">
                    <figure>
                        <img src="{{ asset('build/images/maintainability.avif') }}" width="1500" alt="PhpMetrics">
                    </figure>
                </td>
                <td>
                    <table>
                        <tr>
                            <td style="text-align: left;">
                                <a href="#" data-url="https://scrutinizer-ci.com/g/dougherty-dev/mvc/badges/quality-score.png?b=main" data-alt="Scrutinizer Code Quality" data-repository-url="https://scrutinizer-ci.com/g/dougherty-dev/mvc/?branch=main"></a>
                            </td>
                            <td style="padding-left:10px;">
                                <a href="https://scrutinizer-ci.com/g/dougherty-dev/mvc/build-status/main"><img src="https://scrutinizer-ci.com/g/dougherty-dev/mvc/badges/quality-score.png?b=main" title="Scrutinizer Code Quality"></a>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: left;">
                                <a href="#" data-url="https://scrutinizer-ci.com/g/dougherty-dev/mvc/badges/coverage.png?b=main" data-alt="Code Coverage" data-repository-url="https://scrutinizer-ci.com/g/dougherty-dev/mvc/?branch=main"></a>
                            </td>
                            <td style="padding-left:10px;">
                                <a href="https://scrutinizer-ci.com/g/dougherty-dev/mvc/build-status/main"><img src="https://scrutinizer-ci.com/g/dougherty-dev/mvc/badges/coverage.png?b=main" alt="Code Coverage"></a>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: left;">
                                <a href="#" data-url="https://scrutinizer-ci.com/g/dougherty-dev/mvc/badges/build.png?b=main" data-alt="Build Status" data-repository-url="https://scrutinizer-ci.com/g/dougherty-dev/mvc/build-status/main"></a>
                            </td>
                            <td style="padding-left:10px;">
                                <a href="https://scrutinizer-ci.com/g/dougherty-dev/mvc/build-status/main"><img src="https://scrutinizer-ci.com/g/dougherty-dev/mvc/badges/build.png?b=main" alt="Build Status"></a>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
        <h3>Allm√§nt</h3>
        <p>Projektet √§r det som har tagit √∂verl√§gset mest tid i anspr√•k bland kurser, men det √§r f√∂rst√•s sj√§lvf√∂rv√•llat genom att ta p√• sig en mer utmanande uppgift. Sv√•righeten och tids√•tg√•ngen har framf√∂rallt legat i att finna en fungerande l√∂sning f√∂r logiken under budgivningen, en process som ideligen har bjudit p√• motg√•ngar och tidskr√§vande fels√∂kning. Samtidigt √∂kar tids√•tg√•ngen f√∂r √∂vriga ing√•ende delar, som validering och testning i takt med att projektet sv√§ller. Det √§r ett rimligt projekt f√∂r den som har ambitioner, men man kan f√∂rmoda att ganska m√•nga inte alls skulle g√• i land med det.</p>
        <h3>Kursen</h3>
        <p>√ñverl√§gset mest intressant och viktigast av kurser som har getts, och kanske den som mest liknar verkligheten f√∂r backendutvecklare. √Ñven f√∂r den med n√•gon bakgrund i PHP √§r det en h√∂gst relevant kurs, s√§rskilt om man saknar tidigare erfarenhet av ramverk. Men samtidigt √§r kurserna vid Webtec oerh√∂rt mastiga, samtidigt som dokumentationskraven √§r n√•got √∂verdrivna ‚Äì inga problem f√∂r den som har ordets g√•va, pennans sk√§rpa och bakgrund i att f√∂rfatta digra m√§ngder text, men nog ett hinder i st√∂rsta allm√§nhet f√∂r m√•ngen annan. √Ö andra sidan √§r omfattningen och drillen av vikt f√∂r att verkligen l√§ra sig objektorienterad webbprogrammering. Betyg blir 11/10, eller ¬´stabilt och felfritt¬ª.</p>
        <figure>
            <img src="{{ asset('build/images/chihiro-kmom10.avif') }}" width="1536" alt="Chihiro spelar Texas Hold‚Äôem">
        </figure>
    </section>
    <section class="two-columns" id="kmom06">
        <h2>Kmom06</h2>
        <p class="initcap">Metrik √§r √§mnet f√∂r detta kursmoment, vars huvudsakliga <a href="{{ path('metrics') }}">rapport</a> publiceras separat. Tvenne verktyg brukas prim√§rt, varav det ena utg√∂rs av <strong>PhpMetrics</strong>, med en diger ansamling m√§tmetoder. F√∂rsta k√∂rningen gav sex varningar, varav tv√• utgjordes av sv√•rbegripliga ¬´package violations¬ª och fyra ans√•gs vara klasser som √§r ¬´probably bugged¬ª p√• grund av komplexitetsgraden. F√∂rmodligen √§r det en rimlig skattning, som ligger i linje med min egen tidigare redovisade st√•ndpunkt, s√§rskilt avseende po√§ngber√§kning i kort- och spelklasserna</p>
        <p>Grafiskt kommer det till uttryck i ett diagram av f√§rgade cirklar i trafikljusets palett, varvid den stora klassen <code>GameActions</code> f√∂r ¬´21¬ª √§r ett r√∂tt skynke tillsammans med dess kontrollerklass, t√§tt f√∂ljt av <code>HandScore</code> med dess villkorsfyllda rutiner. Det √§r fr√•n b√∂rjan givet var krutet ska l√§ggas, och p√• s√• vis fyller instrumentet sin funktion.
        <figure>
            <img src="{{ asset('build/images/phpmetrics-scrutinizer.avif') }}" width="1356" alt="Scrutinizer och PhpMetrics">
        </figure>
        <p>Motsvarande k√∂rning med <strong>Scrutinizer</strong> gav som resultat ¬´passed¬ª f√∂r ¬´build¬ª, 100&nbsp;% f√∂r t√§ckning (vilket redan var k√§nt) samt 9.89 f√∂r ¬´Scrutinizer¬ª. Inte s√• pj√•kigt. Verktyget fann fem problematiska punkter, bland annat outnyttjade variabler (som linten inte uppt√§ckte) j√§mte en del udda problem, varav tv√• h√§rr√∂r till extern kod. Sex metoder fick betyg B, medan resten samt alla klasser n√•dde A. Str√§van h√§r √§r f√∂rst√•s den perfekta tian, men i huvudsak √§r detta moment redan avklarat. Scrutinizer ber√§ttar dessutom hur man kan g√• till v√§ga f√∂r att √•tg√§rda ber√∂rda problem.</p>
        <p>Den egna personliga h√•llningen √§r att kodkvalitet i n√•gon mening √§r avg√∂rande f√∂r att kunna h√•lla st√∂rre system vid god kvalitet och i underh√•llbarbart skick. <em>Bloat</em> och buggar √§r ofelbara konsekvenser n√§r man tappar kontrollen √∂ver en stor kodmassa, men d√• √§r det redan f√∂rsent, och man m√•ste skriva om kodbasen fr√•n b√∂rjan.</p>
        <p>F√∂r egen del √§r PHPStan ett uppskattat verktyg f√∂r att h√•lla ordning p√• typer och vilka data man skyfflar runt, och den arsenalen har nu vidgats med ytterligare n√•gra v√§rdefulla instrument (TIL). Samtidigt m√•ste s√§gas att det l√§tt kan bli lite av en fix id√© att jaga po√§ng, tid och resurser som man ist√§llet hade kunnat anv√§nda p√• verklig kodning och kreativa l√∂sningar.</p>
        <figure>
            <img src="{{ asset('build/images/chihiro-kmom06.avif') }}" width="1536" alt="Chihiro f√∂rb√§ttrar kodens kvalitet">
        </figure>
    </section>
    <section class="two-columns" id="kmom05">
        <h2>Kmom05</h2>
        <p class="initcap">Objekt-relationell mappning (ORM) avhandlas via Doctrine i Symfony, kanske mest f√∂r att illustrera √§nnu ett koncept relaterat till databaser. I sj√§lva verket vinner man nog inte s√• mycket p√• en dylik abstraktion, eftersom man √§nd√• m√•ste ha detaljk√§nnedom om sina tabeller och komma √•t data via SQL-liknande satser. √Ñven i andra modeller har man objektorientering p√• sista raden i PHP via getters, setters och andra mekanismer. MariaDB? <em>Defeats the purpose.</em></p>
        <p>Till yttermera visso tillkommer on√∂dig abstraktion, exempelvis f√∂r att uppdatera tabeller, √§ven om det blir lite mindre kod att hantera. Det √§r inte troligt att f√∂rstahandsvalet faller p√• ORM i n√•gon som helst till√§mpning.</p>
        <p>Givet databasens litenhet fordrades √§nd√• en hel del arbete f√∂r att f√• funktionaliteten p√• plats, kanske mest f√∂r att f√• det att passa med Symfonys gr√§nssnitt. Men CRUD √§r CRUD, om √§n i annan tappning, och efter en del inledande sv√•righeter gick det relativt enkelt att bygga biblioteket.</p>
        <p>F√∂r √§ndam√•let kopierades konceptet fr√•n den tidigare kortleksmodellen, med en inre twigmall omfattande en inre meny f√∂r att f√• ett enhetligt gr√§nssnitt f√∂r biblioteket. En centrerad vy med tabeller f√∂r boklistor, enskilda b√∂cker och formul√§r definierar biblioteket, tillsammans med en frontsida. Enskilda detaljvyer har f√∂rsetts med ytterligare navigering till n√§sta och f√∂reg√•ende objekt.</p>
        <p>D√• filuppladdning inte fungerar p√• studentservern skippas den biten ‚Äì ut√∂ver att det skulle ta ytterligare tid i anspr√•k ‚Äì och av det sk√§let kan bilder inte hanteras i nuvarande version. Man f√•r n√∂ja sig med att ange titel, f√∂rfattare och ISBN f√∂r verken, f√∂r vilka en generisk bild definieras i f√∂rekommande fall. Grundl√§ggande felhantering och kontroller i formul√§r har implementerats.</p>
        <p>Denna g√•ng har aspekter av testning funnits med fr√•n f√∂rsta stund, men det mest komplexa √•terfinns alltj√§mt i kontrollklasserna, som h√§r egentligen √§r de enda klasserna av relevans. F√∂r att kunna testa metoder som f√∂r√§ndrar databasen nyttjas en frist√•ende testdatabas (angiven i <code>.env.test.local</code>) f√∂r att inte f√∂rst√∂ra n√•got i den ordinarie databasen. D√§rmed kan en √•terst√§llning f√∂rst g√∂ras, p√• det att exakta data √§r k√§nda f√∂r ID med mera. Alternativet med mockning √§r inte s√• givande i denna enkla modell, eftersom metoderna √§r f√•.</p>
        <figure>
            <img src="{{ asset('build/images/chihiro-kmom05.avif') }}" width="1536" alt="Chihiro kn√•par ORM">
        </figure>
    </section>
    <section class="two-columns" id="kmom04">
        <h2>Kmom04</h2>
        <p class="initcap">Enhetstestning med PHPUnit och Xdebug introduceras, tillsammans med automatisk dokumentation via PHPDoc. H√§r noteras att verktygen i fr√•ga ligger en generation efter aktuell PHP-version (8.6.4), vilket fordrar en del √•tg√§rder f√∂r att slippa on√∂dig felrapportering.</p>
        <p>Sj√§lva f√∂rfarandet att skriva enhetstester f√∂ljer samma mall som i Python och andra spr√•k, och bereder inga st√∂rre sv√•righeter i grunden. D√§remot kan det vara en del arbete att samtidigt f√• testkoden att samspela med PHPStan och andra linters, samt f√∂rst√•s att formulera tester f√∂r en m√§ngd klasser och metoder.</p>
        <p>Hundra procent t√§ckning uppn√•s f√∂rvisso i testerna, men till priset av att n√•gon enstaka funktion fick modifieras och n√•gon l√§ggas till. Specifikt befanns vara n√∂dv√§ndigt att ordna en metod <code>emptyDeck()</code> i klassen <code>Deck</code> f√∂r att kunna l√§gga till enstaka kort i en tom kortlek. Detta f√∂r att kunna simulera situationer med given utg√•ng, exempelvis att bank eller spelare vinner eller f√∂rlorar med s√§kerhet. Mockning kunde h√§r inte anv√§ndas f√∂r √§ndam√•let.</p>
        <p>Sv√•rast att testa var inte ov√§ntat mer komplex kod, s√§rskilt kedjad s√•dan utan returnerade resultat. I metoden f√∂r po√§ngber√§kning uppt√§cktes faktiskt en bugg tack vare testningen, vilket visar att den har potential att f√∂rb√§ttra kod. Givet att man har testning i bakhuvudet redan i ett tidigt skede kan det h√§nda att man vinnl√§gger sig om att skriva renare och mindre komplex kod, en erfarenhet man gott kan ta med sig fr√•n momentet (TIL).</p>
        <p>D√§remot √§r det os√§kert om enhetstestning ger ¬´snyggare¬ª kod. Upplevelsen h√§r √§r att PHPStan √§r det prim√§ra verktyget f√∂r att ordna b√•de logiskt felfri och snygg kod, men det kan h√§nda att testbarheten bidrar en smula.</p>
        <p>Enhetstestning √§r inte heller ett universalverktyg. Med en hammare ska man inte dra i skruv, och p√• samma s√§tt √§r det f√∂ga givande att enhetstesta s√•dant som controllers i ramverket. Funktionella tester √§r i regel b√§ttre f√∂r s√•dana klasser, varvid vi <a href="https://symfony.com/doc/current/testing.html#application-tests">nyttjar</a> Symfonys utvidgning <code>WebTestCase</code> f√∂r att testa router och i f√∂rekommande fall vissa egenskaper som sessionsvariabler.</p>
        <p>Summa summarum n√•s d√§rmed hundra procent t√§ckning √§ven f√∂r controllerklasserna, om √§n av begr√§nsat v√§rde. Tillsammans med felfri lint via PHPStan och PHPMD f√∂religger d√§rf√∂r f√∂rhoppningsvis en n√•gorlunda god kodbas.</p>
        <figure>
            <img src="{{ asset('build/images/chihiro-kmom04.avif') }}" width="1536" alt="Chihiro enhetstestar">
        </figure>
    </section>
    <section class="two-columns" id="kmom03">
        <h2>Kmom03</h2>
        <p class="initcap">Introduktion av PHPStan och PHP Mess Detector g√∂r att kortklasserna i tidigare kursmoment beh√∂ver refaktoreras, samtidigt som de v√§ssas med st√∂rre m√•tt av inkapsling. Detta √§r hemmaplan, och nu b√∂rjar det likna riktig programmering med erforderlig stringens.</p>
        <p>Konstruktion av fl√∂desdiagram, pesudokod och UML-diagram av klasser som angreppsvektor f√∂r problemet √§r en rimlig ansats. P√• s√• s√§tt kan man f√• en grundl√§ggande struktur f√∂r kodbasen, observera repetitiv kod som kan f√∂rl√§ggas i metoder samt avsl√∂ja en del tankefel kring den mentala konstruktionen av modellen. D√§rmed inte sagt att man f√•r en fullst√§ndig bild av problemkomplext med s√•dan modellering, men det √§r en bra b√∂rjan.</p>
        <p>Klassen <code>Banker</code> befanns sm√•ningom vara √∂verfl√∂dig, eftersom det √§r en spelare i m√§ngden med samma slags metoder. Ett f√§lt med <code>Player</code> definierar ist√§llet de tv√• spelarna, och kan enkelt byggas ut till fler. H√§r r√§cker det att h√•lla koll p√• respektive spelare med index.</p>
        <p>Mallarna ska vara dumma, men det blir √§nd√• ett antal <code>if</code>-satser f√∂r att h√•lla reda p√• knappar i olika tillst√•nd. Den huvudsakliga logiken sker √§nd√• i klasserna, med bara ett f√•tal rutter som alla ryms i en enda klass <code>GameController</code>. Mallarna renderas uteslutande med sessionsvariabler.</p>
        <p>Huvudlogiken finns i <code>GameActions</code>, som √§rver magiska getters och setters samt konstanter fr√•n f√∂r√§ldraklassen <code>Game</code>. Spelarens aktioner styrs av knappar och inmatning i formul√§r, medan bankens motsvarande fl√∂de automatiseras.</p>
        <p>Sv√•raste moment √§r kanske n√•got √∂verraskande metoder f√∂r att ber√§kna po√§ngsumma (klassen <code>HandScore</code>) samt sannolikheter f√∂r att bli tjock, d√§r bruket av tv√• jokrar √∂kar komplexiteten med en ordning.</p>
        <h3>Om MVC</h3>
        <p>MVC som designm√∂nster √§r v√§l i sin ordning, men ramverken √§r ofta alldeles f√∂r rigida. Symfony tycks dock lira bra med PHPStan, vilket √§r en f√∂rdel, inte minst i att hantera sessionsvariabler. Med ramverk √§r det s√• att man blir ordentligt fastl√•st i en viss ordning, en l√∂pande bandsprincip som passar industrin v√§l men samtidigt missgynnar mer kreativa angreppsmetoder.</p>
        <p>En intressant egenskap med Symfony √§r st√∂det f√∂r generella getters/setters via magiska metoder <code>__get()</code><code>__isset()</code> och <code>__set()</code>, vilket reducerar kodmassan en del, inte minst antalet publika metoder. Twig kan d√• h√§mta privata egenskaper via dessa metoder, utan att man beh√∂ver synligg√∂ra dem.</p>
        <p>TIL √§r nog att nyttja inkapsling b√§ttre i klasserna, inte minst f√∂r att s√• mycket skr√§p annars skickas runt i komposition och arv. Mycket givande kurs.</p>
        <p>Alla obligatoriska och valfria moment √§r implementerade per specifikation. Inga fel noteras med PHPStan, PHPMD eller PHP CS Fixer.</p>
        <figure>
            <img src="{{ asset('build/images/chihiro-kmom03.avif') }}" width="1536" alt="Chihiro bekantar sig med magiska metoder">
        </figure>
    </section>
    <section class="two-columns" id="kmom02">
        <h2>Kmom02</h2>
        <p class="initcap">Grunden till ett kortspel implementeras h√§r i objektorienterad PHP under ramverket Symfony och med Twig som motor. Arv, komposition, aggregation, gr√§nssnitt och egenskaper definieras teoretiskt, och ansluter i stort till tidigare stoff i Python.</p>
        <p>Med arv (inheritance) menas h√§r snarare en utvidgning av en f√∂r√§ldraklass till en barnklass, i vilken ytterligare metoder, konstanter och attribut kan definieras. I f√∂rekommande fall kan befintliga konstanter och metoder omdefinieras eller √∂ppnas upp mot omv√§rlden (men inte omv√§nt).</p>
        <p>Komposition √§r en klass i en klass, det vill s√§ga klassvis instantiering av en yttre klass. Gr√§nssnitt definierar vi som ett ¬´kontrakt¬ª f√∂r en klass, det vill s√§ga en mall f√∂r metoder utan specifik implementering, vilket √§r till nytta f√∂r att definiera API:n till brukare.</p>
        <p>Egenskaper (traits) √§r mer en form av syntaktiskt lim, ofta f√∂rekommande kod som kan klistras in efter behag via <code>use</code> och d√• f√•r en sj√§lvst√§ndig roll i f√∂rh√•llande till den omgivande klassen. Egenskaper kan ofta vara ett alternativ till on√∂digt kr√•nglig komposition av en miljard klasser.</p>
        <p>F√∂r uppgiften i fr√•ga anv√§nds varken egenskaper eller gr√§nssnitt, men d√§remot nyttjas arv i ett par instanser. De givna rekommendationerna med kortklasser vidgade med jokrar har h√§r implementerats l√∂st. Men den givna och naturliga implementationen av arv ges h√§r av att nyttja <code>CardController</code> som f√∂r√§ldraklass till <code>CardAPIController</code>, eftersom de b√•da har gemensamma metoder, konstanter och attribut, exempelvis session, klassen <code>Deck</code> med flera.</p>
        <p>Det √§r notoriskt kr√•ngligt att bygga klasser p√• ett smidigt s√§tt, och det finns i princip alltid potential f√∂r f√∂rb√§ttringar. Klassen <code>Card</code> (eller snarare <code>CardGraphic</code>) √§r h√§r ganska menl√∂s i f√∂refintligt skick, men skulle s√§kert kunna byggas mer komplicerat.</p>
        <p>Det l√§r ta fler kursmoment f√∂r att √∂vertyga om ramverkens f√∂rtr√§fflighet. Komplexiteten √∂kar bet√§nkligt utan att ge s√• stora vinster, √§ven om det har sin tjusning med f√§rdiga l√∂sningar p√• m√•nga vanliga kodproblem. Dessv√§rre f√•r man l√§gga en del tid p√• buggar i sj√§lva ramverket snarare √§n att fokusera p√• objektorienterad kod i sig.</p>
        <p>Icke desto mindre √§r det tillfredsst√§llande n√§r man v√§l kommer √∂ver den jobbiga tr√∂skeln och kan b√∂rja bygga applikationer. Koden med kontroller, mallar och vyer blir ganska liten och kompakt, √§ven om man √§r mer begr√§nsad √§n med r√• PHP.</p>
        <p>TIL f√∂r kursmomentet f√•r s√§gas vara sessioner i Symfony och Twig, ett smidigt s√§tt att hantera objekt till skillnad fr√•n PHP:s kr√•ngliga motsvarigheter.</p>
        <figure>
            <img src="{{ asset('build/images/chihiro-kmom02.avif') }}" width="1536" alt="Chihiro spelar kort">
        </figure>
    </section>
    <section class="two-columns" id="kmom01">
        <h2>Kmom01</h2>
        <p class="initcap">I rasande tempo introduceras ramverket Symfony, och den f√∂rsamlade skaran studerande har bara att f√∂rs√∂ka h√§nga med i st√∂rtfloden av ny information. Uppl√§gget √§r bekant sedan tidigare: att plumsa i havet, gripa tag i n√•gon drivved och f√∂rs√∂ka √∂verleva. √Ñven om man f√•r en del plankor till sk√§nks att h√•lla fast vid.</p>
        <p>Kontroller, mallar och vyer inf√∂rs i diskursen, och s√• √§ven RESTfulla API:n via JSON. Via Twig kan webbsidor slutligen renderas p√• n√•gorlunda bekant s√§tt, och p√• n√•got vis k√§nns motorn i bakgrunden t√§mligen √∂verfl√∂dig.</p>
        <p>Objektorienterad PHP ber√∂rs flyktigt, men mestadels f√∂r att beskriva klasser i Symfoni. Fr√•gan √§r om ren OOP kommer att avhandlas i kursen? Hantering av bilder, CSS och Javascript ombes√∂rjs d√§refter, varefter resultatet √§r f√§rdigt att distribuera p√• server likv√§l som Github.</p>
        <p>Ang√•ende f√∂rkunskaper kring objektorienterad kod f√∂religger s√•dan i form av Ada och PHP, den senare p√• ganska god niv√•. Klasser och objekt skiljer sig inte n√§mnv√§rt fr√•n andra spr√•k, men instantiering √§r mycket smidigare. Den som kommer fr√•n Python l√§r uppfatta vissa diskrepanser, som att PHP inte per default nyttjar referens i funktionsanrop.</p>
        <p>Ramverk √§r egentligen ett j√§vla skit, men man kan f√∂rst√• lockelsen i att snabbt ha en modell f√§rdig att implementera, till priset av att man blir synnerligen l√•st i sin programmering, och d√§rtill beroende av en stor m√§ngd extern programvara som inte alltid lirar felfritt.</p>
        <p>Det finns i princip inget i <em>PHP The Right Way</em> som √§r s√§rskilt intressant eller tilltalande. Artikeln √§r f√∂rlegad och d√§rtill v√§ldigt r√∂rig. S√§rskilt uppr√∂rande √§r att man f√∂respr√•kar en kodstandard som skiljer sig fr√•n PHP:s egna (1TBS, K&amp;R).</p>
        <p>TIL f√•r nog s√§gas vara att nyttja ramverket Symfony, en erfarenhet som f√∂rvisso √§r nyttig men samtidigt en smula avskr√§ckande. Det √§r sj√§lva definitionen av bloat.</p>
        <figure>
            <img src="{{ asset('build/images/chihiro-kmom01.avif') }}" width="1536" alt="Chihiro introduceras i PHP">
            <figcaption>@mos insk√§rper allvaret i studierna.</figcaption>
        </figure>
    </section>
{% endblock %}
