{% extends "base.html.twig" %}

{% block title %}Rapport{% endblock %}

{% block body %}
    <select id="kmom" aria-label="kmom" onChange="window.document.location.href=this.options[this.selectedIndex].value;">
        <option value="#navbar">topp</option>
        <option value="#kmom01">km01</option>
        <option value="#kmom02">km02</option>
        <!-- option value="#kmom03">km03</option>
        <option value="#kmom04">km04</option>
        <option value="#kmom05">km05</option>
        <option value="#kmom06">km06</option>
        <option value="#kmom10">km10</option -->
    </select>
    <h1>Rapport</h1>
    <section class="two-columns" id="kmom02">
        <h2>Kmom02</h2>
        <p class="initcap">Grunden till ett kortspel implementeras här i objektorienterad PHP under ramverket Symfony och med Twig som motor. Arv, komposition, aggregation, gränssnitt och egenskaper definieras teoretiskt, och ansluter i stort till tidigare stoff i Python.</p>
        <p>Med arv (inheritance) menas här snarare en utvidgning av en föräldraklass till en barnklass, i vilken ytterligare metoder, konstanter och attribut kan definieras. I förekommande fall kan befintliga konstanter och metoder omdefinieras eller öppnas upp mot omvärlden (men inte omvänt).</p>
        <p>Komposition är en klass i en klass, det vill säga klassvis instantiering av en yttre klass. Gränssnitt definierar vi som ett «kontrakt» för en klass, det vill säga en mall för metoder utan specifik implementering, vilket är till nytta för att definiera API:n till brukare.</p>
        <p>Egenskaper (traits) är mer en form av syntaktiskt lim, ofta förekommande kod som kan klistras in efter behag via <code>use</code> och då får en självständig roll i förhållande till den omgivande klassen. Egenskaper kan ofta vara ett alternativ till onödigt krånglig komposition av en miljard klasser.</p>
        <figure>
            <img src="{{ asset('build/images/chihiro-kmom02.avif') }}" width="1792" alt="Chihiro">
        </figure>
        <p>För uppgiften i fråga används varken egenskaper eller gränssnitt, men däremot nyttjas arv i ett par instanser. De givna rekommendationerna med kortleksklasser vidgade med jokrar har här implementerats, och även ett embryo för en «grafisk» kortklass föreligger löst i bakgrunden. Men den givna och naturliga implementationen av arv ges här av att nyttja <code>CardController</code> som föräldraklass till <code>CardAPIController</code>, eftersom de båda har gemensamma metoder, konstanter och attribut, exempelvis session, klassen <code>Deck</code> (eller snarare <code>DeckExtended</code>) med flera.</p>
        <p>Det är notoriskt krångligt att bygga klasser på ett smidigt sätt, och det finns i princip alltid potential för förbättringar. Klassen <code>Card</code> är här ganska menlös i förefintligt skick, men skulle säkert kunna byggas mer komplicerat.</p>
        <p>Det lär ta fler kursmoment för att övertyga om ramverkens förträfflighet. Komplexiteten ökar betänkligt utan att ge så stora vinster, även om det har sin tjusning med färdiga lösningar på många vanliga kodproblem. Dessvärre får man lägga en del tid på buggar i själva ramverket snarare än att fokusera på objektorienterad kod i sig.</p>
        <p>Icke desto mindre är det tillfredsställande när man väl kommer över den jobbiga tröskeln och kan börja bygga applikationer. Koden med kontroller, mallar och vyer blir ganska liten kompakt, även om man är mer begränsad än med rå PHP.</p>
        <p>TIL för kursmomentet får sägas vara sessioner i Symfony och Twig, ett smidigt sätt att hantera objekt till skillnad från PHP:s krångliga motsvarigheter.</p>
        <figure>
            <img src="{{ asset('build/images/chihiro-cards-api.avif') }}" width="1024" alt="Chihiro">
        </figure>
    </section>
    <section class="two-columns" id="kmom01">
        <h2>Kmom01</h2>
        <p class="initcap">I rasande tempo introduceras ramverket Symfony, och den församlade skaran studerande har bara att försöka hänga med i störtfloden av ny information. Upplägget är bekant sedan tidigare: att plumsa i havet, gripa tag i någon drivved och försöka överleva. Även om man får en del plankor till skänks att hålla fast vid.</p>
        <p>Kontroller, mallar och vyer införs i diskursen, och så även RESTfulla API:n via JSON. Via Twig kan webbsidor slutligen renderas på någorlunda bekant sätt, och på något vis känns motorn i bakgrunden tämligen överflödig.</p>
        <p>Objektorienterad PHP berörs flyktigt, men mestadels för att beskriva klasser i Symfoni. Frågan är om ren OOP kommer att avhandlas i kursen? Hantering av bilder, CSS och Javascript ombesörjs därefter, varefter resultatet är färdigt att distribuera på server likväl som Github.</p>
        <p>Angående förkunskaper kring objektorienterad kod föreligger sådan i form av Ada och PHP, den senare på ganska god nivå. Klasser och objekt skiljer sig inte nämnvärt från andra språk, men instantiering är mycket smidigare. Den som kommer från Python lär uppfatta vissa diskrepanser, som att PHP inte per default nyttjar referens i funktionsanrop.</p>
        <p>Ramverk är egentligen ett jävla skit, men man kan förstå lockelsen i att snabbt ha en modell färdig att implementera, till priset av att man blir synnerligen låst i sin programmering, och därtill beroende av en stor mängd extern programvara som inte alltid lirar felfritt.</p>
        <p>Det finns i princip inget i <em>PHP The Right Way</em> som är särskilt intressant eller tilltalande. Artikeln är förlegad och därtill väldigt rörig. Särskilt upprörande är att man förespråkar en kodstandard som skiljer sig från PHP:s egna (1TBS, K&amp;R).</p>
        <p>TIL får nog sägas vara att nyttja ramverket Symfony, en erfarenhet som kanske är nyttig men som jag aldrig skulle fundera på att använda för egen del. Det är själva definitionen av bloat.</p>
        <figure>
            <img src="{{ asset('build/images/chihiro-kmom01.avif') }}" width="1536" alt="Chihiro">
            <figcaption>@mos inskärper allvaret i studierna.</figcaption>
        </figure>
    </section>
{% endblock %}
